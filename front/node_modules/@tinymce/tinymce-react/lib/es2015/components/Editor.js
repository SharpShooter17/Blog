/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import * as React from 'react';
import { tinymce } from '../TinyMCE';
import { bindHandlers, isTextarea, uuid } from '../Utils';
import { EditorPropTypes } from './EditorPropTypes';
var Editor = /** @class */ (function (_super) {
    __extends(Editor, _super);
    function Editor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.element = null;
        return _this;
    }
    Editor.prototype.componentWillMount = function () {
        this.id = this.id || this.props.id || uuid('tiny-react');
    };
    Editor.prototype.componentDidMount = function () {
        var _this = this;
        var initialValue = typeof this.props.initialValue === 'string' ? this.props.initialValue : '';
        var finalInit = __assign({}, this.props.init, { selector: "#" + this.id, inline: this.props.inline, setup: function (editor) {
                _this.editor = editor;
                editor.on('init', function () { return editor.setContent(initialValue); });
                bindHandlers(_this.props, editor);
            } });
        if (isTextarea(this.element)) {
            this.element.style.visibility = '';
        }
        tinymce.init(finalInit);
    };
    Editor.prototype.componentWillUnmount = function () {
        this.removeEditor();
    };
    Editor.prototype.render = function () {
        return this.props.inline ? this.renderInline() : this.renderIframe();
    };
    Editor.prototype.renderInline = function () {
        var _this = this;
        var _a = this.props.tagName, tagName = _a === void 0 ? 'div' : _a;
        return React.createElement(tagName, {
            ref: function (elm) { return _this.element = elm; },
            id: this.id
        });
    };
    Editor.prototype.renderIframe = function () {
        var _this = this;
        return (React.createElement("textarea", { ref: function (elm) {
                _this.element = elm;
            }, style: { visibility: 'hidden' }, id: this.id }));
    };
    Editor.prototype.removeEditor = function () {
        tinymce.remove(this.editor);
    };
    Editor.propTypes = EditorPropTypes;
    return Editor;
}(React.Component));
export { Editor };
